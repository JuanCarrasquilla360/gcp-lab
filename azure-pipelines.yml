# Azure Pipeline for CI/CD to Google Cloud Run
trigger:
- main

variables:
  # Google Cloud Project Configuration
  GCP_PROJECT_ID: 'deploy-php-461616'
  GCP_REGION: 'us-central1'
  SERVICE_NAME: 'helloworld-php-cicd'
  
  # Container Registry Configuration
  REGISTRY_HOSTNAME: 'gcr.io'
  IMAGE_NAME: '$(REGISTRY_HOSTNAME)/$(GCP_PROJECT_ID)/$(SERVICE_NAME)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Test
  displayName: 'Run Tests'
  jobs:
  - job: TestJob
    displayName: 'Unit Tests'
    steps:
    - script: |
        echo "Installing PHP..."
        sudo apt-get update
        sudo apt-get install -y php php-cli
        php --version
      displayName: 'Setup PHP Environment'
    
    - script: |
        echo "Running PHP unit tests..."
        php test/test-app.php
      displayName: 'Run Unit Tests'
      continueOnError: false

- stage: Build
  displayName: 'Build and Push Image'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: BuildJob
    displayName: 'Build Docker Image'
    steps:
    - script: |
        echo "Building application..."
        echo "Current directory: $(pwd)"
        ls -la
      displayName: 'List project files'
    
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(IMAGE_NAME):$(Build.BuildId)
          $(IMAGE_NAME):latest
    
    - script: |
        # Install Google Cloud SDK
        curl https://sdk.cloud.google.com | bash
        exec -l $SHELL
        source $HOME/google-cloud-sdk/path.bash.inc
        
        # Authenticate with Google Cloud
        echo "Authenticating with Google Cloud..."
        echo '$(GCP_SERVICE_ACCOUNT_KEY)' | base64 -d > gcp-key.json
        gcloud auth activate-service-account --key-file gcp-key.json
        gcloud config set project $(GCP_PROJECT_ID)
        
        # Configure Docker for GCR
        gcloud auth configure-docker
        
        # Push image to Google Container Registry
        docker push $(IMAGE_NAME):$(Build.BuildId)
        docker push $(IMAGE_NAME):latest
        
        # Clean up
        rm gcp-key.json
      displayName: 'Push to Google Container Registry'
      env:
        GCP_SERVICE_ACCOUNT_KEY: $(GCP_SERVICE_ACCOUNT_KEY)

- stage: Deploy
  displayName: 'Deploy to Cloud Run'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy to Cloud Run'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              # Install Google Cloud SDK
              curl https://sdk.cloud.google.com | bash
              exec -l $SHELL
              source $HOME/google-cloud-sdk/path.bash.inc
              
              # Authenticate with Google Cloud
              echo '$(GCP_SERVICE_ACCOUNT_KEY)' | base64 -d > gcp-key.json
              gcloud auth activate-service-account --key-file gcp-key.json
              gcloud config set project $(GCP_PROJECT_ID)
              
              # Deploy to Cloud Run
              gcloud run deploy $(SERVICE_NAME) \
                --image $(IMAGE_NAME):$(Build.BuildId) \
                --platform managed \
                --region $(GCP_REGION) \
                --allow-unauthenticated \
                --port 80 \
                --memory 512Mi \
                --cpu 1000m \
                --max-instances 10
              
              # Get service URL
              SERVICE_URL=$(gcloud run services describe $(SERVICE_NAME) --region=$(GCP_REGION) --format='value(status.url)')
              echo "Service deployed successfully!"
              echo "Service URL: $SERVICE_URL"
              
              # Test the deployed service
              echo "Testing deployed service..."
              response=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL)
              if [ "$response" = "200" ]; then
                echo "✅ Service is responding correctly!"
              else
                echo "❌ Service test failed with HTTP $response"
                exit 1
              fi
              
              # Clean up
              rm gcp-key.json
            displayName: 'Deploy to Cloud Run'
            env:
              GCP_SERVICE_ACCOUNT_KEY: $(GCP_SERVICE_ACCOUNT_KEY)

- stage: PostDeploy
  displayName: 'Post-Deployment Verification'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: VerifyJob
    displayName: 'Verify Deployment'
    steps:
    - script: |
        echo "Deployment completed successfully!"
        echo "Your application is now live at:"
        echo "https://$(SERVICE_NAME)-[hash]-$(GCP_REGION).a.run.app"
        echo ""
        echo "Next steps:"
        echo "1. Check Cloud Run console: https://console.cloud.google.com/run"
        echo "2. Monitor logs: https://console.cloud.google.com/logs"
        echo "3. View metrics: https://console.cloud.google.com/monitoring"
      displayName: 'Show Success Message' 